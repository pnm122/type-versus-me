// View transition API related styling must be separated from modules since
// the selectors are global :(

// Override this explicitly for elements that should have a view transition animation
::view-transition-new(*),
::view-transition-old(*) {
	/* Prevent the default animation,
  so both views remain opacity:1 throughout the transition */
	animation: none;
	/* Use normal blending,
  so the new view sits on top and obscures the old view */
	mix-blend-mode: normal;
}

::view-transition-group(.notification) {
	animation-duration: 0.25s;
	animation-timing-function: var(--timing);
}

// ENTRANCE ANIMATION: view-transition-new is the only child only when an element is appearing
::view-transition-new(.notification-up):only-child {
	animation: 0.25s var(--timing) enter-downwards forwards;
}

// EXIT ANIMATION: view-transition-old is the only child only when an element is appearing
::view-transition-old(.notification-up-first):only-child {
	animation: 0.25s var(--timing) exit-upwards forwards;
}

::view-transition-new(.notification-down):only-child {
	animation: 0.25s var(--timing) enter-upwards forwards;
}

::view-transition-old(.notification-down-first):only-child {
	animation: 0.25s var(--timing) exit-downwards forwards;
}

::view-transition-old(.notification-not-first):only-child {
	animation: 0.25s var(--timing) not-first-exit forwards;
}

@keyframes enter-downwards {
	from {
		transform: translateY(calc(-100% - 12px));
	}
	to {
		transform: none;
	}
}

@keyframes exit-upwards {
	from {
		transform: none;
	}
	to {
		transform: translateY(calc(-100% - 12px));
	}
}

@keyframes enter-upwards {
	from {
		transform: translateY(calc(100% + 12px));
	}
	to {
		transform: none;
	}
}

@keyframes exit-downwards {
	from {
		transform: none;
	}
	to {
		transform: translateY(calc(100% + 12px));
	}
}

@keyframes not-first-exit {
	from {
		transform: none;
	}
	to {
		opacity: 0;
		transform: scale(0.85);
	}
}
